"use strict"

/*
	Дано інформацію про прибуток К магазинів протягом тижня. Знайти:
	
	1) загальний прибуток кожного масиву за тиждень
	2) загальний прибуток усіх магазинів по дням (загальний прибуток усіх магазинів за понеділок, за вівторок, і т.д.)
	3) загальний прибуток за робочі дні
	4) загальний прибуток за вихідні дні
	5) максимальний прибуток за середу
	6) сформувати загальний список (одновимірний масив) зі значенням, які що більші за 200
	7) відсортувати кожен тиждень за зростанням
	8) відсортувати тижні (рядки) за спаданням максимального елементи у цьому тижні (рядку), тобто при порівнянні рядків потрібно порівнювати максимальні 		елементи у кожному з цих рядків
	9) упорядкувати тижні (рядки) за спаданням суми елементів у рядку (тобто при порівнянні двох рядків треба знайти суму кожного з рядків і порівнювати ці суми, на основі цих сум буде зрозуміло, який з елементів повинен іти раніше)
*/

if (confirm("Почати тестування?")) {

	let profits = [
		[3000, 2590, 4700, 1850, 2400, 1400, 2600],  
		[2000, 800, 4050, 5500, 1540, 700, 1000], 
		[1500, 800, 3450, 4500, 2510, 3200, 1050],  
		[1050, 3000, 3540, 4000, 250, 3400, 2550],   
		[1500, 3000, 2350, 4000, 2050, 3500, 1550],  
	]
	
	// 1) загальний прибуток кожного масиву за тиждень
	const totalWeeklyProfit = (profits) => profits.map(week => week.reduce((a, b) => a + b, 0));


	// 2) загальний прибуток усіх магазинів по дням (загальний прибуток усіх магазинів за понеділок, за вівторок, і т.д.)
	const totalDailyProfit = (profits) => {
		let dailyTotals = new Array(7).fill(0);
		profits.forEach(week => {
			 week.forEach((profit, day) => {
				  dailyTotals[day] += profit;
			 });
		});
		return dailyTotals;
   }
  
	// 3) загальний прибуток за робочі дні
	const totalWeekdayProfit = (profits) => {
		return profits.reduce((total, week) => {
			 return total + week.slice(0, 5).reduce((a, b) => a + b, 0);
		}, 0);
   }
  
	// 4) загальний прибуток за вихідні дні
	const totalWeekendProfit = (profits) => {
		return profits.reduce((total, week) => {
			 return total + week.slice(5, 7).reduce((a, b) => a + b, 0);
		}, 0);
   }
   
	// 5) максимальний прибуток за середу
	const maxWednesdayProfit = (profits) => {
		return Math.max(...profits.map(week => week[2]));
   }
  
	// 6) сформувати загальний список (одновимірний масив) зі значенням, які що більші за 200
	const profitsAbove200 = (profits) => {
		return profits.flat().filter(profit => profit > 200);
   }
  	
	// 7) відсортувати кожен тиждень за зростанням
	const sortWeeklyProfits = (profits) => {
		return profits.map(week => [...week].sort((a, b) => a - b));
	}

	// 8) відсортувати тижні (рядки) за спаданням максимального елементи у цьому тижні (рядку), тобто при порівнянні рядків потрібно порівнювати максимальні елементи у кожному з цих рядків
	const sortWeeksByMaxProfit = (profits) => {
		return [...profits].sort((a, b) => Math.max(...b) - Math.max(...a));
	}

	// 9) упорядкувати тижні (рядки) за спаданням суми елементів у рядку (тобто при порівнянні двох рядків треба знайти суму кожного з рядків і порівнювати ці суми, на основі цих сум буде зрозуміло, який з елементів повинен іти раніше)
	const sortWeeksByTotalProfit = (profits) => {
		return [...profits].sort((a, b) => b.reduce((sum, profit) => sum + profit, 0) - a.reduce((sum, profit) => sum + profit, 0));
	}
  
	document.write(`
		1. Загальний прибуток кожного масиву за тиждень: ${totalWeeklyProfit(profits)} <br>
		2. Загальний прибуток усіх магазинів по дням: ${totalDailyProfit(profits)}<br>
		3. Загальний прибуток за робочі дні: ${totalWeekdayProfit(profits)}<br>
		4. Загальний прибуток за вихідні дні: ${totalWeekendProfit(profits)}<br>
		5. Максимальний прибуток за середу: ${maxWednesdayProfit(profits)}<br>
		6. Загальний список значень більших за 200: ${profitsAbove200(profits)}<br>
		7. Відсортовані тижні за зростанням: ${sortWeeklyProfits(profits)}<br>
		8. Тижні за спаданням максимального елемента: ${sortWeeksByMaxProfit(profits)}<br>
		9. Тижні за спаданням суми елементів: ${sortWeeksByTotalProfit(profits)}<br>
	`);
}